TLS_VERSION = b"\x03\x01"   # TLS 1.0
CIPHER_SUITE = b"\x00\x2f"  # TLS_RSA_WITH_AES_128_SHA
BLOCK_SIZE = 16
SEQUENCE_NUMBER = 3         # Finished is the 4th record


class Keys:
    def __init__(self, key_block: bytes):
        self.client_mac_key = key_block[:20]
        self.server_mac_key = key_block[20:40]
        self.client_write_key = key_block[40:56]
        self.server_write_key = key_block[56:72]
        self.client_initialization_vector = key_block[72:88]
        self.server_initialization_vector = key_block[88:104]


# ---------------- PRF ----------------
def p_hash(hash_mod, secret: bytes, seed: bytes, size: int):
    result = b""
    A = seed
    while len(result) < size:
        A = hmac.new(secret, A, hash_mod).digest()
        result += hmac.new(secret, A + seed, hash_mod).digest()
    return result[:size]

def tls_prf(secret: bytes, label: bytes, seed: bytes, size: int) -> bytes:
    half = (len(secret) + 1) // 2
    s1, s2 = secret[:half], secret[-half:]
    md5_bytes = p_hash(md5, s1, label + seed, size)
    sha1_bytes = p_hash(sha1, s2, label + seed, size)
    return bytes(x ^ y for x, y in zip(md5_bytes, sha1_bytes))

# ---------------- TLS record helpers ----------------
def recv_tls_record(conn):
    header = conn.recv(5)
    if not header:
        return None, None
    ctype = header[0]
    length = struct.unpack(">H", header[3:5])[0]
    body = b""
    while len(body) < length:
        chunk = conn.recv(length - len(body))
        if not chunk:
            break
        body += chunk
    return ctype, body

def build_server_hello(server_random: bytes) -> bytes:
    session_id = b"\x00"
    comp_methods = b"\x01\x00"
    body = (b"\x02" +
            struct.pack(">I", 38 + 1 + 2 + 1)[1:] +
            TLS_VERSION + server_random + session_id + CIPHER_SUITE + comp_methods)
    return b"\x16" + TLS_VERSION + struct.pack(">H", len(body)) + body

def build_certificate(cert_bytes: bytes) -> bytes:
    cert_list = struct.pack(">I", len(cert_bytes))[1:] + cert_bytes
    all_certs = struct.pack(">I", len(cert_list))[1:] + cert_list
    body = b"\x0b" + struct.pack(">I", len(all_certs))[1:] + all_certs
    return b"\x16" + TLS_VERSION + struct.pack(">H", len(body)) + body

def build_server_hello_done() -> bytes:
    body = b"\x0e\x00\x00\x00"
    return b"\x16" + TLS_VERSION + struct.pack(">H", len(body)) + body

def build_alert(description: int) -> bytes:
    level = 2  # fatal
    payload = bytes([level, description])
    return b"\x15" + TLS_VERSION + struct.pack(">H", len(payload)) + payload