#!/usr/bin/env python3
import argparse
import hmac
import struct
import socket
import base64
from hashlib import sha1, md5
from os import urandom

from Crypto.Cipher import AES

from TLS_helpers import *

HOST = "nova.cs.tau.ac.il"
PORT = 5001



# ---------------- Server response parser ----------------
def receive_server_hello(sock: socket.socket):
    handshake = b""
    server_random = None
    while True:
        msg_type, body = recv_tls_message(sock)
        if msg_type != 22:  # handshake
            continue
        handshake += body
        if body[0] == 0x0e:  # ServerHelloDone
            break
        if body[0] == 0x02:  # ServerHello
            server_random = body[6:38]
    if server_random is None:
        raise SystemExit("Cannot find ServerHello")
    return server_random, handshake

def classify_server_response(sock: socket.socket):
    while True:
        data = sock.recv(4096)
        if not data:
            break
        if len(data) >= 7 and data[0] == 0x15:  # Alert
            desc = data[6]
            if desc == 20:
                return "Valid"
            elif desc == 21:
                return "Invalid"
        elif data == b"OK\n":
            return "OK"
    return "Unknown"

# ---------------- Main ----------------
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("ciphertext_b64", help="RSA ciphertext in base64")
    args = parser.parse_args()

    ciphertext = base64.b64decode(args.ciphertext_b64)
    client_random = urandom(32)

    client_hello = build_client_hello(client_random)
    client_key_exchange = build_client_key_exchange(ciphertext)
    change_cipher_spec = build_change_cipher_spec()

    sock = socket.create_connection((HOST, PORT))
    sock.sendall(client_hello)
    server_random, server_hello = receive_server_hello(sock)

    # Dummy premaster (not related to ciphertext)
    premaster = TLS_VERSION + urandom(46)
    master_secret = tls_prf(premaster, b"master secret", client_random + server_random, 48)
    keys = derive_keys(master_secret, client_random, server_random)

    all_handshakes = client_hello[5:] + server_hello + client_key_exchange[5:]
    finished = build_finished(master_secret, keys, all_handshakes)

    # Send messages
    sock.sendall(client_key_exchange)
    sock.sendall(change_cipher_spec)
    sock.sendall(finished)

    verdict = classify_server_response(sock)
    print(f"[Oracle verdict] {verdict}")

    sock.close()

if __name__ == "__main__":
    main()