#!/usr/bin/env python3
import argparse
import socket
import base64
import statistics
import re


# Config
PROXY_HOST = "nova.cs.tau.ac.il"  
PROXY_PORT = 6000    
REPEAT = 50   # number of times to send each ciphertext
THRESHOLD_MS = 20.0 


# Helpers
def query_cipher(ciphertext_b64: str) -> float:
    """Send one ciphertext to the proxy and parse RTT from its debug output."""
    sock = socket.create_connection((PROXY_HOST, PROXY_PORT))
    sock.sendall(ciphertext_b64.encode() + b"\n")

    response = b""
    while True:
        data = sock.recv(4096)
        if not data:
            break
        response += data
    sock.close()

    # Extract RTT from the debug output
    text = response.decode(errors="replace")
    match = re.search(r"\[DEBUG\] RTT: ([0-9.]+) ms", text)
    if match:
        return float(match.group(1))
    else:
        raise RuntimeError("Could not find RTT in proxy output:\n" + text)

def classify(ciphertext_b64: str) -> str:
    """Classify ciphertext as Invalid / Valid-Pad-BadMAC."""
    rtts = []
    for _ in range(REPEAT):
        rtt = query_cipher(ciphertext_b64)
        rtts.append(rtt)

    avg_rtt = statistics.mean(rtts)

    if avg_rtt < THRESHOLD_MS:
        verdict = "Invalid (bad padding)"
    else:
        verdict = "Valid Padding"
    return verdict


# Main 
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--cipher_candidate")
    args = parser.parse_args()

    verdict = classify(args.cipher_candidate)
    print(f"[Oracle verdict]: {verdict}")

if __name__ == "__main__":
    main()
