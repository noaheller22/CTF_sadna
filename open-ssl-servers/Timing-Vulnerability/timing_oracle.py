#!/usr/bin/env python3
import argparse
import socket
import base64
import time
import statistics

# ---------------- Config ----------------
PROXY_HOST = "nova.cs.tau.ac.il"  
PROXY_PORT = 6000    
REPEAT = 50   # number of times to send each ciphertext
THRESHOLD_MS = 20.0 

def query_cipher(ciphertext_b64: str):
    """Send one ciphertext to the proxy and measure RTT + response."""
    sock = socket.create_connection((PROXY_HOST, PROXY_PORT))
    start = time.perf_counter()
    sock.sendall(ciphertext_b64.encode() + b"\n")
    response = b""
    while True:
        data = sock.recv(4096)
        if not data:
            break
        response += data
    end = time.perf_counter()
    sock.close()
    rtt_ms = (end - start) * 1000
    return rtt_ms

def classify(ciphertext_b64: str):
    """Classify ciphertext as Invalid / Valid-Pad-BadMAC / Valid."""
    rtts = []
    for _ in range(REPEAT):
        rtt = query_cipher(ciphertext_b64)
        rtts.append(rtt)

    avg_rtt = statistics.mean(rtts)
    print(f"Avg RTT:{avg_rtt}")

    if avg_rtt < THRESHOLD_MS:
        verdict = "Invalid (bad padding)"
    else:
        verdict = "Valid Padding"

    return verdict

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("ciphertext_b64", help="RSA ciphertext in base64")
    args = parser.parse_args()

    verdict = classify(args.ciphertext_b64)

    print(f"[Oracle verdict] {verdict}")

if __name__ == "__main__":
    main()
