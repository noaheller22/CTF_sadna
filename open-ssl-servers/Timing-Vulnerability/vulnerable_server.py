import socket, subprocess, os, time

OPENSSL_BIN = "/a/home/cc/students/cs/danielknebel/CTF_sadna/open-ssl-servers/Timing-Vulnerability/openssl-0.9.8zg/build/bin/openssl"

PRIVATE_KEY = "./server.key"

def handle_client(client_sock):
    ciphertext = client_sock.recv(2048)
    if not ciphertext:
        client_sock.send(b"error:No ciphertext")
        return

    with open("ciphertext.bin", "wb") as f:
        f.write(ciphertext)

    result = subprocess.run([
        OPENSSL_BIN, "rsautl", "-decrypt", "-in", "ciphertext.bin",
        "-inkey", PRIVATE_KEY, "-pkcs"
    ], capture_output=True)

    os.remove("ciphertext.bin")

    # Artificial timing gap to make timing oracle precise
    if result.returncode == 0:
        time.sleep(0.05)   # add 50 ms delay for valid ciphertexts
    else:
        time.sleep(0.0)    # no delay for invalid ciphertexts

    client_sock.send(b"done")

def main():
    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_sock.bind(('0.0.0.0', 4434))
    server_sock.listen(5)
    print("Timing-vulnerable server (with artificial gap) running on port 4434")
    while True:
        client_sock, _ = server_sock.accept()
        handle_client(client_sock)
        client_sock.close()

if __name__ == "__main__":
    main()
