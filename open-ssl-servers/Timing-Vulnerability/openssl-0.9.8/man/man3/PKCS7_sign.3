.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PKCS7_sign 3"
.TH PKCS7_sign 3 2015-06-11 0.9.8zg OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
PKCS7_sign \- create a PKCS#7 signedData structure
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/pkcs7.h>
\&
\& PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs, BIO *data, int flags);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBPKCS7_sign()\fR creates and returns a PKCS#7 signedData structure. \fBsigncert\fR
is the certificate to sign with, \fBpkey\fR is the corresponsding private key.
\&\fBcerts\fR is an optional additional set of certificates to include in the
PKCS#7 structure (for example any intermediate CAs in the chain).
.PP
The data to be signed is read from BIO \fBdata\fR.
.PP
\&\fBflags\fR is an optional set of flags.
.SH NOTES
.IX Header "NOTES"
Any of the following flags (ored together) can be passed in the \fBflags\fR parameter.
.PP
Many S/MIME clients expect the signed content to include valid MIME headers. If
the \fBPKCS7_TEXT\fR flag is set MIME headers for type \fBtext/plain\fR are prepended
to the data.
.PP
If \fBPKCS7_NOCERTS\fR is set the signer's certificate will not be included in the
PKCS7 structure, the signer's certificate must still be supplied in the \fBsigncert\fR
parameter though. This can reduce the size of the signature if the signers certificate
can be obtained by other means: for example a previously signed message.
.PP
The data being signed is included in the PKCS7 structure, unless \fBPKCS7_DETACHED\fR 
is set in which case it is omitted. This is used for PKCS7 detached signatures
which are used in S/MIME plaintext signed messages for example.
.PP
Normally the supplied content is translated into MIME canonical format (as required
by the S/MIME specifications) if \fBPKCS7_BINARY\fR is set no translation occurs. This
option should be used if the supplied data is in binary format otherwise the translation
will corrupt it.
.PP
The signedData structure includes several PKCS#7 autenticatedAttributes including
the signing time, the PKCS#7 content type and the supported list of ciphers in
an SMIMECapabilities attribute. If \fBPKCS7_NOATTR\fR is set then no authenticatedAttributes
will be used. If \fBPKCS7_NOSMIMECAP\fR is set then just the SMIMECapabilities are
omitted.
.PP
If present the SMIMECapabilities attribute indicates support for the following
algorithms: triple DES, 128 bit RC2, 64 bit RC2, DES and 40 bit RC2. If any
of these algorithms is disabled then it will not be included.
.PP
If the flags \fBPKCS7_PARTSIGN\fR is set then the returned \fBPKCS7\fR structure
is just initialized ready to perform the signing operation. The signing
is however \fBnot\fR performed and the data to be signed is not read from
the \fBdata\fR parameter. Signing is deferred until after the data has been
written. In this way data can be signed in a single pass. Currently the
flag \fBPKCS7_DETACHED\fR \fBmust\fR also be set.
.SH NOTES
.IX Header "NOTES"
Currently the flag \fBPKCS7_PARTSIGN\fR is only supported for detached
data. If this flag is set the returned \fBPKCS7\fR structure is \fBnot\fR
complete and outputting its contents via a function that does not
properly finalize the \fBPKCS7\fR structure will give unpredictable 
results.
.PP
At present only the \fBSMIME_write_PKCS7()\fR function properly finalizes the
structure.
.SH BUGS
.IX Header "BUGS"
\&\fBPKCS7_sign()\fR is somewhat limited. It does not support multiple signers, some
advanced attributes such as counter signatures are not supported.
.PP
The SHA1 digest algorithm is currently always used.
.PP
When the signed data is not detached it will be stored in memory within the
\&\fBPKCS7\fR structure. This effectively limits the size of messages which can be
signed due to memory restraints. There should be a way to sign data without
having to hold it all in memory, this would however require fairly major
revisions of the OpenSSL ASN1 code.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBPKCS7_sign()\fR returns either a valid PKCS7 structure or NULL if an error occurred.
The error can be obtained from \fBERR_get_error\fR\|(3).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBERR_get_error\fR\|(3), \fBPKCS7_verify\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBPKCS7_sign()\fR was added to OpenSSL 0.9.5
.PP
The \fBPKCS7_PARTSIGN\fR flag was added in OpenSSL 0.9.8
