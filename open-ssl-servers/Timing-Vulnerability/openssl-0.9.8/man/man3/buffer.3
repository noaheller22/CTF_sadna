.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "buffer 3"
.TH buffer 3 2015-01-15 0.9.8zg OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
BUF_MEM_new, BUF_MEM_free, BUF_MEM_grow, BUF_strdup \- simple
character arrays structure
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/buffer.h>
\&
\& BUF_MEM *BUF_MEM_new(void);
\&
\& void   BUF_MEM_free(BUF_MEM *a);
\&
\& int    BUF_MEM_grow(BUF_MEM *str, int len);
\&
\& char * BUF_strdup(const char *str);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The buffer library handles simple character arrays. Buffers are used for
various purposes in the library, most notably memory BIOs.
.PP
The library uses the BUF_MEM structure defined in buffer.h:
.PP
.Vb 6
\& typedef struct buf_mem_st
\& {
\&        int length;     /* current number of bytes */
\&        char *data;
\&        int max;        /* size of buffer */
\& } BUF_MEM;
.Ve
.PP
\&\fBlength\fR is the current size of the buffer in bytes, \fBmax\fR is the amount of
memory allocated to the buffer. There are three functions which handle these
and one "miscellaneous" function.
.PP
\&\fBBUF_MEM_new()\fR allocates a new buffer of zero size.
.PP
\&\fBBUF_MEM_free()\fR frees up an already existing buffer. The data is zeroed
before freeing up in case the buffer contains sensitive data.
.PP
\&\fBBUF_MEM_grow()\fR changes the size of an already existing buffer to
\&\fBlen\fR. Any data already in the buffer is preserved if it increases in
size.
.PP
\&\fBBUF_strdup()\fR copies a null terminated string into a block of allocated
memory and returns a pointer to the allocated block.
Unlike the standard C library \fBstrdup()\fR this function uses \fBOPENSSL_malloc()\fR and so
should be used in preference to the standard library \fBstrdup()\fR because it can
be used for memory leak checking or replacing the \fBmalloc()\fR function.
.PP
The memory allocated from \fBBUF_strdup()\fR should be freed up using the \fBOPENSSL_free()\fR
function.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBBUF_MEM_new()\fR returns the buffer or NULL on error.
.PP
\&\fBBUF_MEM_free()\fR has no return value.
.PP
\&\fBBUF_MEM_grow()\fR returns zero on error or the new size (i.e. \fBlen\fR).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBbio\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBBUF_MEM_new()\fR, \fBBUF_MEM_free()\fR and \fBBUF_MEM_grow()\fR are available in all
versions of SSLeay and OpenSSL. \fBBUF_strdup()\fR was added in SSLeay 0.8.
