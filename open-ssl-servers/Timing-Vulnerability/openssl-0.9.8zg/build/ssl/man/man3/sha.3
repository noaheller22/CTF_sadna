.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "sha 3"
.TH sha 3 2015-06-11 0.9.8zg OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SHA1, SHA1_Init, SHA1_Update, SHA1_Final \- Secure Hash Algorithm
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/sha.h>
\&
\& unsigned char *SHA1(const unsigned char *d, unsigned long n,
\&                  unsigned char *md);
\&
\& int SHA1_Init(SHA_CTX *c);
\& int SHA1_Update(SHA_CTX *c, const void *data,
\&                  unsigned long len);
\& int SHA1_Final(unsigned char *md, SHA_CTX *c);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
SHA\-1 (Secure Hash Algorithm) is a cryptographic hash function with a
160 bit output.
.PP
\&\fBSHA1()\fR computes the SHA\-1 message digest of the \fBn\fR
bytes at \fBd\fR and places it in \fBmd\fR (which must have space for
SHA_DIGEST_LENGTH == 20 bytes of output). If \fBmd\fR is NULL, the digest
is placed in a static array.
.PP
The following functions may be used if the message is not completely
stored in memory:
.PP
\&\fBSHA1_Init()\fR initializes a \fBSHA_CTX\fR structure.
.PP
\&\fBSHA1_Update()\fR can be called repeatedly with chunks of the message to
be hashed (\fBlen\fR bytes at \fBdata\fR).
.PP
\&\fBSHA1_Final()\fR places the message digest in \fBmd\fR, which must have space
for SHA_DIGEST_LENGTH == 20 bytes of output, and erases the \fBSHA_CTX\fR.
.PP
Applications should use the higher level functions
\&\fBEVP_DigestInit\fR\|(3)
etc. instead of calling the hash functions directly.
.PP
The predecessor of SHA\-1, SHA, is also implemented, but it should be
used only when backward compatibility is required.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBSHA1()\fR returns a pointer to the hash value.
.PP
\&\fBSHA1_Init()\fR, \fBSHA1_Update()\fR and \fBSHA1_Final()\fR return 1 for success, 0 otherwise.
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
SHA: US Federal Information Processing Standard FIPS PUB 180 (Secure Hash
Standard),
SHA\-1: US Federal Information Processing Standard FIPS PUB 180\-1 (Secure Hash
Standard),
ANSI X9.30
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBripemd\fR\|(3), \fBhmac\fR\|(3), \fBEVP_DigestInit\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
\&\fBSHA1()\fR, \fBSHA1_Init()\fR, \fBSHA1_Update()\fR and \fBSHA1_Final()\fR are available in all
versions of SSLeay and OpenSSL.
