.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SSL_CTX_new 3"
.TH SSL_CTX_new 3 2015-06-11 0.9.8zg OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SSL_CTX_new \- create a new SSL_CTX object as framework for TLS/SSL enabled functions
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& SSL_CTX *SSL_CTX_new(SSL_METHOD *method);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBSSL_CTX_new()\fR creates a new \fBSSL_CTX\fR object as framework to establish
TLS/SSL enabled connections.
.SH NOTES
.IX Header "NOTES"
The SSL_CTX object uses \fBmethod\fR as connection method. The methods exist
in a generic type (for client and server use), a server only type, and a
client only type. \fBmethod\fR can be of the following types:
.IP "SSLv2_method(void), SSLv2_server_method(void), SSLv2_client_method(void)" 4
.IX Item "SSLv2_method(void), SSLv2_server_method(void), SSLv2_client_method(void)"
A TLS/SSL connection established with these methods will only understand
the SSLv2 protocol. A client will send out SSLv2 client hello messages
and will also indicate that it only understand SSLv2. A server will only
understand SSLv2 client hello messages.
.IP "SSLv3_method(void), SSLv3_server_method(void), SSLv3_client_method(void)" 4
.IX Item "SSLv3_method(void), SSLv3_server_method(void), SSLv3_client_method(void)"
A TLS/SSL connection established with these methods will only understand the
SSLv3 protocol. A client will send out SSLv3 client hello messages
and will indicate that it only understands SSLv3. A server will only understand
SSLv3 client hello messages. This especially means, that it will
not understand SSLv2 client hello messages which are widely used for
compatibility reasons, see SSLv23_*\fB_method()\fR.
.IP "TLSv1_method(void), TLSv1_server_method(void), TLSv1_client_method(void)" 4
.IX Item "TLSv1_method(void), TLSv1_server_method(void), TLSv1_client_method(void)"
A TLS/SSL connection established with these methods will only understand the
TLSv1 protocol. A client will send out TLSv1 client hello messages
and will indicate that it only understands TLSv1. A server will only understand
TLSv1 client hello messages. This especially means, that it will
not understand SSLv2 client hello messages which are widely used for
compatibility reasons, see SSLv23_*\fB_method()\fR. It will also not understand
SSLv3 client hello messages.
.IP "SSLv23_method(void), SSLv23_server_method(void), SSLv23_client_method(void)" 4
.IX Item "SSLv23_method(void), SSLv23_server_method(void), SSLv23_client_method(void)"
A TLS/SSL connection established with these methods will understand the SSLv2,
SSLv3, and TLSv1 protocol. A client will send out SSLv2 client hello messages
and will indicate that it also understands SSLv3 and TLSv1. A server will
understand SSLv2, SSLv3, and TLSv1 client hello messages. This is the best
choice when compatibility is a concern.
.PP
The list of protocols available can later be limited using the SSL_OP_NO_SSLv2,
SSL_OP_NO_SSLv3, SSL_OP_NO_TLSv1 options of the \fBSSL_CTX_set_options()\fR or
\&\fBSSL_set_options()\fR functions. Using these options it is possible to choose
e.g. \fBSSLv23_server_method()\fR and be able to negotiate with all possible
clients, but to only allow newer protocols like SSLv3 or TLSv1.
.PP
\&\fBSSL_CTX_new()\fR initializes the list of ciphers, the session cache setting,
the callbacks, the keys and certificates, and the options to its default
values.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
The following return values can occur:
.IP NULL 4
.IX Item "NULL"
The creation of a new SSL_CTX object failed. Check the error stack to
find out the reason.
.IP "Pointer to an SSL_CTX object" 4
.IX Item "Pointer to an SSL_CTX object"
The return value points to an allocated SSL_CTX object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBSSL_CTX_free\fR\|(3), \fBSSL_accept\fR\|(3),
\&\fBssl\fR\|(3),  \fBSSL_set_connect_state\fR\|(3)
