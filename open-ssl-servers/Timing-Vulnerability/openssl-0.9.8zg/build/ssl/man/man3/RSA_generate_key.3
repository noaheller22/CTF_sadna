.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "RSA_generate_key 3"
.TH RSA_generate_key 3 2015-06-11 0.9.8zg OpenSSL
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
RSA_generate_key \- generate RSA key pair
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rsa.h>
\&
\& RSA *RSA_generate_key(int num, unsigned long e,
\&    void (*callback)(int,int,void *), void *cb_arg);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBRSA_generate_key()\fR generates a key pair and returns it in a newly
allocated \fBRSA\fR structure. The pseudo-random number generator must
be seeded prior to calling \fBRSA_generate_key()\fR.
.PP
The modulus size will be \fBnum\fR bits, and the public exponent will be
\&\fBe\fR. Key sizes with \fBnum\fR < 1024 should be considered insecure.
The exponent is an odd number, typically 3, 17 or 65537.
.PP
A callback function may be used to provide feedback about the
progress of the key generation. If \fBcallback\fR is not \fBNULL\fR, it
will be called as follows:
.IP \(bu 4
While a random prime number is generated, it is called as
described in \fBBN_generate_prime\fR\|(3).
.IP \(bu 4
When the n\-th randomly generated prime is rejected as not
suitable for the key, \fBcallback(2, n, cb_arg)\fR is called.
.IP \(bu 4
When a random p has been found with p\-1 relatively prime to \fBe\fR,
it is called as \fBcallback(3, 0, cb_arg)\fR.
.PP
The process is then repeated for prime q with \fBcallback(3, 1, cb_arg)\fR.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
If key generation fails, \fBRSA_generate_key()\fR returns \fBNULL\fR; the
error codes can be obtained by \fBERR_get_error\fR\|(3).
.SH BUGS
.IX Header "BUGS"
\&\fBcallback(2, x, cb_arg)\fR is used with two different meanings.
.PP
\&\fBRSA_generate_key()\fR goes into an infinite loop for illegal input values.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBERR_get_error\fR\|(3), \fBrand\fR\|(3), \fBrsa\fR\|(3),
\&\fBRSA_free\fR\|(3)
.SH HISTORY
.IX Header "HISTORY"
The \fBcb_arg\fR argument was added in SSLeay 0.9.0.
