"Here is a helper function you can use in order to analyze the servers behavior"


import time, socket, statistics, re

def measure_avg_rtt(ciphertext_b64: str, tries: int = 10) -> float:
    """
    Send a ciphertext multiple times to the proxy and compute the average RTT.
    RTT is extracted from the proxy's debug output.
    """
    rtts = []
    for _ in range(tries):
        sock = socket.create_connection((PROXY_HOST, PROXY_PORT))
        sock.sendall(ciphertext_b64.encode() + b"\n")

        response = b""
        while True:
            data = sock.recv(4096)
            if not data:
                break
            response += data
        sock.close()

        text = response.decode(errors="replace")
        match = re.search(r"\[DEBUG\] RTT: ([0-9.]+) ms", text)
        if match:
            rtts.append(float(match.group(1)))

    if not rtts:
        raise RuntimeError("No RTT values could be extracted")

    avg_rtt = statistics.mean(rtts)
    print(f"[Helper] Average RTT over {tries} tries: {avg_rtt:.3f} ms")
    return avg_rtt